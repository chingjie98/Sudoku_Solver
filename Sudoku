#Sudoku solver

board = [
        [7, 8, 0, 4, 0, 0, 1, 2, 0],
        [6, 0, 0, 0, 7, 5, 0, 0, 9],
        [0, 0, 0, 6, 0, 1, 0, 7, 8],
        [0, 0, 7, 0, 4, 0, 2, 6, 0],
        [0, 0, 1, 0, 5, 0, 9, 3, 0],
        [9, 0, 4, 0, 6, 0, 0, 0, 5],
        [0, 7, 0, 3, 0, 0, 0, 1, 2],
        [1, 2, 0, 0, 0, 7, 4, 0, 0],
        [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]

def print_board(bo):
    # display the sudoku into a proper sudoku template
    for i in range(len(bo)):
        if i % 3 == 0 and i > 0:
            print("----------------------")

        for j in range(len(bo[0])):
            if j % 3 == 0 and j!= 0:
                print(" | ", end ="")

            if j == 8:
                print(bo[i][j], end="\n")
            else:
                print((bo[i][j]),end=" ")



def find_empty(bo):
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j)

    return None,None

def is_valid(bo,num,row,col):
    #checks if the num were already in the row, column or 3x3 boxes
    row_values = bo[row]
    if num in row_values:
        return False #check if num in the row, if yes then return False

    col_values = []
    for i in range(9):
        col_values.append(bo[i][col])
    if num in col_values:
        return False #check if num in the col, if yes then return False

    row_start = (row // 3) * 3
    col_start = (col // 3) * 3

    for r in range(row_start,row_start + 3):
        for c in range(col_start,col_start + 3):
            if bo[r][c] == num:
                return False #check if num in 3x3 grid, yes then return False
    return True

def solve_sudoku(bo):
    row,col = find_empty(bo)

    if row is None:
        return True #if none, means all solved. End func

    for num in range(1,10):
        if is_valid(bo,num,row,col):   #if valid num, then replace the empty cell with the valid num
            bo[row][col] = num

            if solve_sudoku(bo):
                return True  #if solve, repeat and continue

        bo[row][col] = 0 
    return False

print_board(board)
print("_____________________________________________________________")
solve_sudoku(board)
print_board(board)




